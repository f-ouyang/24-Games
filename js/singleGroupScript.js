// Get the value of a selected option in a dropdown (select element)
const selectElement = document.querySelector('select');
const selectedValue = selectElement.value;

// =================================================================
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Serving Settings
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// =================================================================

//Default Values, to be imported from user settgings in the futre
const numberOfNumbersDefault = 4;
const maximumNumberDefault = 9;
const targetIntegerDefault = 24;
const allSolutionsDefault = false;
const showNumberOfSolutionsDefault = true;

// Define global variables for the page scope
// Global variables for settings
let numberOfNumbers = numberOfNumbersDefault;
let maximumNumber = maximumNumberDefault;
let targetInteger = targetIntegerDefault;
let allSolutions = allSolutionsDefault;
let showNumberOfSolutions = showNumberOfSolutionsDefault;
// Global variables for tracking the game
let inputNumbers = []; //Input numbers for the problem
let systemSolutions = []; // Solutions generated by system in alphabet
let userSolutions = []; // Solutions generated by user in alphabet
// Not that the formats are different.
// systemSolutions is an array of strings indicating algebraic expressions.
// userSolutions is an array of objects with the following properties:
// algebraic and numeric.

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Initialization of setup: enable setting fields and load default numbers
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
{
    let obj;
    // Number of Numbers
    obj = document.getElementById("ID_NUMBER_OF_NUMBERS");
    obj.value = numberOfNumbers;
    obj.classList.remove("hidden");
    // Maximum Number
    obj=document.getElementById("ID_MAX_INTEGER");
    obj.value = maximumNumber; 
    obj.classList.remove("hidden");
    // Target Integer
    obj=document.getElementById("ID_TARGET_INTEGER");
    obj.value = targetInteger;
    obj.classList.remove("hidden");
    // All Solutions
    obj=document.getElementById("ID_ALL_SOLUTIONS");
    obj.checked = allSolutions;
    obj.classList.remove("hidden");
    // Show Number of Solutions
    obj=document.getElementById("ID_SHOW_NUMBER_OF_SOLUTIONS");
    obj.checked = showNumberOfSolutions;
    obj = document.getElementById("ID_SHOW_NUMBER_OF_SOLUTIONS_LABEL");
     if (allSolutions) {
         obj.style.display = "block";
    }
    else {
        obj.style.display = "none";
    }


} // End of Initialization

setupFieldUpdates(); // Set up the field updates for the settings


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Control Buttons
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
{
    let obj = document.getElementById("ID_NEW_GAME");
    obj.addEventListener("click", function() {
        startNewGame(); //populate the problem and save solution
    });

    obj = document.getElementById("ID_ENTER");
    obj.addEventListener("click", function() {
        saveSolution(); //check and save the current solution, 
        // go to done if only one solution is needed.
    });
    obj = document.getElementById("ID_DONE");
    obj.addEventListener("click", function() {
        displaySolution(); //display all solutions, highlight the one user entered;
    });

    obj = document.getElementById("ID_START_OVER");
    obj.addEventListener("click", function() {
        startInput(); // reset all buttons for the current solution
    });

} // End of Control Buttons


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Game Button Classes
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class numberButtonJavaClass extends HTMLButtonElement { 
    constructor() {
      super();
      this.classList.add("numberButton");
      this.setAttribute("draggable", "true"); // Make it draggable
      // Add shared behavior for all buttons
      this.addEventListener("dragstart", draggableDragStartHandler);
      // Internal state to track operands and operator
      const state = {
        operand_1: null,
        operand_2: null,
        op: null
      };

      // Default: Disabled
    
      this.disabled = true;
      this.draggable = false; 
  
      // Wrap state with Proxy to react to changes
      this.state = new Proxy(state, {
        set: (target, prop, value) => {
          if (["operand_1", "operand_2", "op"].includes(prop)) {
            target[prop] = value;
            this.updateInternalState();
            return true;
          }
          return false;
        }
      });
    }
  
    // Called when state.operand_1, operand_2, or op is changed
    updateInternalState() {
      if ([this.state.operand_1, this.state.operand_2, this.state.op].some(v => v === null)) {
        this.textContent = '?';
        this.value = ''; // Clear the value when not all operands are set
        this.disabled = true; // Disable the button when not all operands are set
        this.draggable = false; // Disable dragging when not all operands are set
      } else {
        const symb1 = this.state.operand_1.value;
        const symb2 = this.state.op.value;
        const symb3 = this.state.operand_2.value;
  
        const expression = `${symb1}${symb2}${symb3}`;
        try {
          const answer = math.evaluate(expression);
          this.value = answer; // Store the answer in the button's value
          /*
          if(Number.isInteger(answer)) {
            this.textContent = answer.toFixed(0); // Display the answer
          }
          else {// approximate with a simple fraction.
            const frac = math.fraction(answer); // We hope it won't be complicated by rounding error
            this.textContent = frac.toFraction(true); // Display the answer
           }
            */ // test test: we probably don't need this logic as toFraction can handle integers too.
          const frac = math.fraction(answer); // We hope it won't be complicated by rounding error
          this.textContent = frac.toFraction(true); // Display the answer
        } catch (err) {
          console.error("Expression error:", err);
          this.textContent = '?';
        }
        // Enable the button for dragging
        this.disabled = false;
        this.draggable = true;  
      }// end of else
    }// end of updateInternalState()
  
    select() {
      this.classList.add("selected");
    }
  
    deselect() {
      this.classList.remove("selected");
    }
  }// end of class numberButtonJavaClass




class targetButtonJavaClass extends HTMLButtonElement {
    // TODO This is a scaffold for now. The final version will have more logic
    constructor() {
        super();
        this.classList.add("numberButton");
        this.classList.add("targetButton");
        this.sourceObject = null; // Initialize sourceObject property to null
        this.answerObject = null;
        this.targetType = null; // To be set when the button is created

        // Add shared behavior for all buttons
        this.addEventListener("dragenter", targetDragEnterHandler);
        this.addEventListener ("dragleave", targetDragLeaveHandler);
        this.addEventListener("drop", targetDropHandler);
        this.addEventListener("dragover", targetDragOverHandler);
        this.addEventListener("click", targetClickHandler);

        // add properties
        this.sourceObject = null; //The number button that drops here
        this.answerObject = null; // link to the answer button

            }

    select() {
        this.classList.add("selected");
    }

    deselect() {
        this.classList.remove("selected");
    }
} // End of targetButtonJavaClass

  class OpSelector extends HTMLSelectElement {
    constructor() {
      super();
  
      this.classList.add("op-button");
      this.classList.add("equation-operator");
  
      const ops = ["?", "+", "-", "*", "/"];
      const opsDisplay = ["?", "+", "-", "ร", "รท"];
      ops.forEach(op => {
        const option = document.createElement("option");
        option.value = op;
        this.appendChild(option);
      });
      opsDisplay.forEach((op, index) => {
        this.options[index].textContent = opsDisplay[index];
      });

      this.addEventListener("change",handleChange); ;
      this.answerObject = null;
    }
    
} // End of OpSelector Class

/* Register the custom classes */
customElements.define("target-button", targetButtonJavaClass, { extends: "button" });
customElements.define("number-button", numberButtonJavaClass, { extends: "button" });
customElements.define("op-selector", OpSelector, { extends: "select" });


